<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            min-height: 100vh;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }
        #game-container {
            text-align: center;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            position: relative;
            max-width: 1200px;
            margin: 20px auto;
        }
        h1 {
            color: #333;
            margin-top: 10px;
            margin-bottom: 30px;
            font-size: 1.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        #rings-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            max-width: 1000px;
            margin: 0 auto;
            gap: 20px;
        }
        .ring {
            width: 180px;
            height: 180px;
            margin: 15px;
            border-radius: 50%;
            border: 3px solid #4a90e2;
            position: relative;
            cursor: pointer;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .ring:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }
        .target-ring {
            border-color: #4CAF50;
            box-shadow: 0 0 15px rgba(76, 175, 80, 0.5);
        }
        .target-ring:hover {
            box-shadow: 0 0 20px rgba(76, 175, 80, 0.7);
        }
        .ring-segment {
            position: absolute;
            width: 50%;
            height: 50%;
            left: 50%;
            top: 50%;
            transform-origin: left top;
            border-left: 1.5px solid rgba(74, 144, 226, 0.5);
        }
        .ring-number {
            position: absolute;
            font-size: 14px;
            font-weight: bold;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            transform: translate(-50%, -50%);
        }
        .selected {
            background-color: rgba(74, 144, 226, 0.2);
            border-color: #2c3e50;
            border-width: 4px;
        }
        #message {
            margin-top: 30px;
            font-size: 20px;
            font-weight: bold;
            padding: 15px;
            border-radius: 10px;
            transition: all 0.3s ease;
            opacity: 1;
            transition: opacity 0.5s ease-in-out;
        }
        .success {
            background-color: #4CAF50;
            color: white;
        }
        .error {
            background-color: #f44336;
            color: white;
        }
        
        /* 添加重新开始按钮的样式 */
        #restart-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 18px;
            background-color: #4a90e2;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        #restart-button:hover {
            background-color: #357abd;
        }

        /* 添加提示按钮的样式 */
        #hint-button {
            margin-top: 20px;
            margin-right: 10px;
            padding: 10px 20px;
            font-size: 18px;
            background-color: #ffa500;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #hint-button:hover {
            background-color: #ff8c00;
        }

        .hint {
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ring {
            transition: all 0.3s ease;
        }

        .ring.selected {
            animation: pulse 0.5s ease-in-out;
        }

        .ring:hover {
            transform: scale(1.05);
        }

        .hint {
            animation: pulse 1s infinite;
        }

        #message {
            transition: opacity 0.5s ease-in-out;
        }

        #message.fade-in {
            opacity: 1;
        }

        #message.fade-out {
            opacity: 0;
        }

        .ring-segment {
            transition: background-color 0.3s ease;
        }

        .selected .ring-segment {
            background-color: rgba(74, 144, 226, 0.3);
        }

        .order-number {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 30px;
            height: 30px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 18px;
            font-weight: bold;
            z-index: 10;
            transition: all 0.3s ease;
        }

        /* 添加退出按钮样式 */
        .exit-button {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .exit-button:hover {
            background-color: #d32f2f;
        }

        /* 添加帮助按钮样式 */
        .help-button {
            position: static;
            margin-left: auto;
        }

        /* 添加模态框样式 */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 10px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        #game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            margin: 10px 0 20px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: calc(100% - 40px);
            position: relative;
            z-index: 1;
        }

        #timer, #score-display {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            padding: 5px 15px;
            border-radius: 5px;
            background-color: rgba(74, 144, 226, 0.1);
        }

        /* 移除旧的 score-display 样式 */
        #score-display[style] {
            position: static !important;
            transform: none !important;
        }

        /* 修改标题样式 */
        h1 {
            margin: 0;
            color: #333;
            font-size: 1.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        /* 修改退出按钮样式 */
        .exit-button {
            position: static; /* 移除绝对定位 */
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        /* 修改帮助按钮样式 */
        .help-button {
            position: static; /* 移除绝对定位 */
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        /* 修改蒙层样式 */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .overlay-content {
            background: rgba(255, 255, 255, 0.9);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(4px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .overlay-content h2 {
            color: #333;
            font-size: 2em;
            margin-bottom: 20px;
        }

        .overlay-content p {
            color: #666;
            font-size: 1.2em;
            margin-bottom: 30px;
        }

        #start-game-btn {
            background: #4a90e2;
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.2em;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
        }

        #start-game-btn:hover {
            background: #357abd;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 144, 226, 0.4);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 初始隐藏游戏内容 */
        #game-container {
            opacity: 1;
            transition: none;
        }

        #game-container.show {
            opacity: 1;
        }

        .difficulty-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .difficulty-btn {
            padding: 10px 25px;
            font-size: 1.1em;
            border: 2px solid #4a90e2;
            border-radius: 20px;
            background: transparent;
            color: #4a90e2;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .difficulty-btn:hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .difficulty-btn.active {
            background: #4a90e2;
            color: white;
        }

        .difficulty-desc {
            color: #666;
            font-size: 1em;
            margin: 10px 0 20px;
            font-style: italic;
        }

        /* 添加成功消息的动画效果 */
        @keyframes successPop {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); opacity: 1; }
        }

        .success {
            background-color: #4CAF50;
            color: white;
            animation: successPop 0.5s ease-out;
        }

        /* 添加成功标题样式 */
        .success-title {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 48px;
            color: #4CAF50;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
        }

        .success-title.show {
            animation: successTitle 2s ease-out forwards;
        }

        @keyframes successTitle {
            0% { 
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.5);
            }
            50% { 
                opacity: 1;
                transform: translate(-50%, -50%) scale(1.2);
            }
            100% { 
                opacity: 0;
                transform: translate(-50%, -50%) scale(1);
            }
        }

        .hint-button {
            background-color: #ffa500;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .hint-button:hover {
            background-color: #ff8c00;
        }

        .hint-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .hint {
            animation: hintPulse 1s infinite;
        }

        @keyframes hintPulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(255, 165, 0, 0.7); }
            70% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(255, 165, 0, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(255, 165, 0, 0); }
        }

        .hint-arrow {
            position: absolute;
            height: 4px;
            background: linear-gradient(90deg, #ffa500, #ff8c00);
            transform-origin: left center;
            pointer-events: none;
            z-index: 1000;
        }
        
        .hint-arrow::after {
            content: '';
            position: absolute;
            right: -10px;
            top: -8px;
            border-left: 20px solid #ff8c00;
            border-top: 10px solid transparent;
            border-bottom: 10px solid transparent;
        }
        
        /* 添加箭头动画 */
        @keyframes arrowPulse {
            0% { opacity: 0.4; }
            50% { opacity: 1; }
            100% { opacity: 0.4; }
        }
        
        .hint-arrow {
            animation: arrowPulse 1s infinite;
        }

        /* 在难度选择下方添加提示开关 */
        .hint-toggle-container {
            margin: 10px 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .hint-switch {
            position: relative;
            display: inline-flex;
            align-items: center;
            cursor: pointer;
        }

        .hint-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .hint-slider {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
            background-color: #ccc;
            border-radius: 24px;
            transition: .4s;
            margin-right: 10px;
        }

        .hint-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            border-radius: 50%;
            transition: .4s;
        }

        input:checked + .hint-slider {
            background-color: #4a90e2;
        }

        input:checked + .hint-slider:before {
            transform: translateX(26px);
        }

        .hint-label {
            font-size: 16px;
            color: #333;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
</head>
<body>
    <%- include('partials/nav') %>
    
    <div id="game-container">
        <div class="game-header">
            <button onclick="showHelp()" class="help-button">帮助</button>
        </div>

        <div id="game-info">
            <div id="timer">时间：00:00</div>
            <button id="hint-button" class="hint-button">提示 (4次)</button>
            <div id="score-display">最高分：0</div>
            <div id="avg-time-display">最近10局平均用时：--:--</div>
        </div>

        <div id="rings-container"></div>
        <div id="message"></div>
        <button id="restart-button">重新开始</button>
    </div>

    <div id="success-title" class="success-title">恭喜通关！</div>

    <!-- 添加帮助模态框 -->
    <div id="helpModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeHelp()">&times;</span>
            <h2>游戏规则说明</h2>
            <p>1. 游戏中有10个圆环，每个圆环上有10个数字。</p>
            <p>2. 你的目标是找出4个特殊的圆环，这些圆环满足以下条件：</p>
            <ul>
                <li>四个圆环的数字之和相等</li>
                <li>四个圆环可以首尾相连（第一个圆环的第5、6个数字与第二个圆环的第1、10个数字相同，以此类推）</li>
            </ul>
            <p>3. 点击圆环可以选中或取消选中。</p>
            <p>4. 选中4个圆环后，系统会自动检查是否为正确答案。</p>
            <p>5. 你可以使用"提示"按钮获取帮助，或者"重新开始"按钮重置游戏。</p>
        </div>
    </div>

    <!-- 在 body 中添加蒙层 -->
    <div id="start-overlay" class="overlay">
        <div class="overlay-content">
            <h2>神奇四环</h2>
            <p>选择游戏难度：</p>
            <div class="difficulty-buttons">
                <button class="difficulty-btn" data-difficulty="easy">初级</button>
                <button class="difficulty-btn active" data-difficulty="medium">中级</button>
            </div>
            <p class="difficulty-desc">中级：数字范围 10-30</p>
            <button id="start-game-btn">开始游戏</button>
        </div>
    </div>

    <script src="/js/magic_rings.js"></script>
    <script>
        console.log('Magic Rings script loaded');

        function exitGame() {
            window.location.href = '/';
        }

        // 添加显示帮助的函数
        function showHelp() {
            document.getElementById('helpModal').style.display = 'block';
        }

        // 添加关闭帮助的函数
        function closeHelp() {
            document.getElementById('helpModal').style.display = 'none';
        }

        // 点击模态框外部时关闭
        window.onclick = function(event) {
            if (event.target == document.getElementById('helpModal')) {
                closeHelp();
            }
        }

        // 修改 celebrateSuccess 函数，添加调试日志
        function celebrateSuccess() {
            // 获取游戏数据
            const timeSpent = Date.now() - startTimeStamp;
            const score = calculateScore(timeSpent, attempts);
            const level = currentDifficulty;

            console.log('游戏数据:', {
                timeSpent,
                score,
                level,
                startTimeStamp,
                attempts
            });

            // 保存游戏记录
            saveGameRecord(score, timeSpent, level)
                .then(() => console.log('记录保存完成'))
                .catch(err => console.error('记录保存失败:', err));

            // 显示成功标题
            const successTitle = document.getElementById('success-title');
            successTitle.classList.add('show');
            setTimeout(() => {
                successTitle.classList.remove('show');
            }, 2000);

            // 发射礼花
            const duration = 3 * 1000;
            const animationEnd = Date.now() + duration;

            // 创建密集的礼花效果
            const interval = setInterval(function() {
                const timeLeft = animationEnd - Date.now();
                
                if (timeLeft <= 0) {
                    return clearInterval(interval);
                }

                // 随机位置发射礼花
                confetti({
                    particleCount: 3,
                    angle: 60,
                    spread: 55,
                    origin: { x: 0 },
                    colors: ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff']
                });
                confetti({
                    particleCount: 3,
                    angle: 120,
                    spread: 55,
                    origin: { x: 1 },
                    colors: ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff']
                });
            }, 50);

            // 添加中间爆发效果
            confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.6 },
                colors: ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff']
            });

            // 添加螺旋效果
            const end = Date.now() + (1 * 1000);
            const colors = ['#ff0000', '#00ff00', '#0000ff'];

            (function frame() {
                confetti({
                    particleCount: 2,
                    angle: 60,
                    spread: 55,
                    origin: { x: 0 },
                    colors: colors
                });
                
                confetti({
                    particleCount: 2,
                    angle: 120,
                    spread: 55,
                    origin: { x: 1 },
                    colors: colors
                });

                if (Date.now() < end) {
                    requestAnimationFrame(frame);
                }
            }());
        }

        // 修改 saveGameRecord 函数，添加更详细的调试信息
        async function saveGameRecord(score, timeSpent, level) {
            const recordData = {
                game_name: 'magic_rings',
                score: score,
                time_spent: timeSpent,
                level: level
            };
            
            console.log('准备发送的记录数据:', recordData);
            
            try {
                const response = await fetch('/records', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(recordData)
                });

                console.log('API响应状态:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('API错误详情:', errorText);
                    throw new Error(`保存记录失败: ${response.status} ${errorText}`);
                }

                const data = await response.json();
                console.log('API响应数据:', data);
                return data;
            } catch (error) {
                console.error('保存记录时发生错误:', error);
                console.error('错误堆栈:', error.stack);
                throw error;
            }
        }

        // 修改 calculateScore 函数，添加计算过程的日志
        function calculateScore(timeSpent, attempts) {
            console.log('计算分数的输入参数:', { timeSpent, attempts });
            
            // 基础分数 10000
            let score = 10000;
            console.log('基础分数:', score);
            
            // 每秒扣除 10 分
            const timeDeduction = Math.floor(timeSpent / 1000) * 10;
            score -= timeDeduction;
            console.log('时间扣分:', timeDeduction, '剩余分数:', score);
            
            // 每次尝试扣除 100 分(从第二次尝试开始算)
            const attemptDeduction = (attempts - 1) * 100;
            score -= attemptDeduction;
            console.log('尝试次数扣分:', attemptDeduction, '剩余分数:', score);
            
            // 确保分数不为负,且为整数
            const finalScore = Math.max(0, Math.floor(score));
            console.log('最终分数:', finalScore);
            
            return finalScore;
        }

        // 在游戏开始时初始化变量
        function startGame() {
            startTimeStamp = Date.now();
            attempts = 0; // 确保 attempts 被正确初始化
            console.log('游戏开始:', {
                startTimeStamp,
                attempts,
                currentDifficulty
            });
            // ... 其他游戏初始化代码 ...
        }
    </script>
</body>
</html>